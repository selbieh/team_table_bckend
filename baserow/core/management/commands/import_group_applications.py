import sys
import os
import json

from django.db import transaction
from django.core.management.base import BaseCommand

from baserow.core.models import Group
from baserow.core.handler import CoreHandler


class Command(BaseCommand):
    help = (
        "Imports an exported JSON file and optionally a ZIP file containing the files. "
        "The applications are added to the provided group id. Exports generated by the "
        "`export_group_applications` are compatible. If for example the group with ID"
        "10 has been exported then you probably need to run this command with the "
        "following arguments: `NEW_GROUP_ID group_10`."
    )

    def add_arguments(self, parser):
        parser.add_argument(
            "group_id",
            type=int,
            help="The id of the group where the newly created applications must be "
            "added to.",
        )
        parser.add_argument(
            "name",
            type=str,
            help="The name of the export. An export is by default named `group_{ID}`. "
            "At least a JSON file with the given name is expected in the working "
            "directory.",
        )

    @transaction.atomic
    def handle(self, *args, **options):
        group_id = options["group_id"]
        name = options["name"]

        try:
            group = Group.objects.get(pk=group_id)
        except Group.DoesNotExist:
            self.stdout.write(
                self.style.ERROR(f"The group with id {group_id} was not " f"found.")
            )
            sys.exit(1)

        current_path = os.path.abspath(os.getcwd())
        files_path = os.path.join(current_path, f"{name}.zip")
        import_path = os.path.join(current_path, f"{name}.json")
        handler = CoreHandler()

        with open(import_path, "r") as import_buffer:
            content = json.load(import_buffer)
            files_buffer = None

            try:
                files_buffer = open(files_path, "rb")
            except FileNotFoundError:
                self.stdout.write(
                    f"The `{name}.zip` was not found. This could result in error or "
                    f"missing files."
                )

            applications, _ = handler.import_applications_to_group(
                group, content, files_buffer
            )

            if files_buffer:
                files_buffer.close()

        self.stdout.write(f"{len(applications)} application(s) has/have been imported.")
